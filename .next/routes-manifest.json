{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/2crsads",
      "regex": "^/2crsads(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/2crsads(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/blog/blog-details",
      "regex": "^/blog/blog\\-details(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog/blog\\-details(?:/)?$"
    },
    {
      "page": "/blog-sidebar",
      "regex": "^/blog\\-sidebar(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog\\-sidebar(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/faq",
      "regex": "^/faq(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/faq(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/home2",
      "regex": "^/home2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/home2(?:/)?$"
    },
    {
      "page": "/home3",
      "regex": "^/home3(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/home3(?:/)?$"
    },
    {
      "page": "/politica-privacidade",
      "regex": "^/politica\\-privacidade(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/politica\\-privacidade(?:/)?$"
    },
    {
      "page": "/pricing",
      "regex": "^/pricing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/pricing(?:/)?$"
    },
    {
      "page": "/project",
      "regex": "^/project(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/project(?:/)?$"
    },
    {
      "page": "/project/project-details",
      "regex": "^/project/project\\-details(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/project/project\\-details(?:/)?$"
    },
    {
      "page": "/service",
      "regex": "^/service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service(?:/)?$"
    },
    {
      "page": "/service/service-details",
      "regex": "^/service/service\\-details(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service/service\\-details(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/team",
      "regex": "^/team(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/team(?:/)?$"
    },
    {
      "page": "/team/team-details",
      "regex": "^/team/team\\-details(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/team/team\\-details(?:/)?$"
    },
    {
      "page": "/termos-de-uso",
      "regex": "^/termos\\-de\\-uso(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/termos\\-de\\-uso(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}